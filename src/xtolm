#!/bin/bash

# Author: Mikhail Milchenko, mmilchenko@wustl.edu
# Copyright (c) 2010-2021, Computational Imaging Lab, School of Medicine, 
# Washington University in Saint Louis

# Redistribution and use in source and binary forms,
# with or without modification, are permitted provided 
# that the following conditions are met:

# 1. Redistributions of source code must retain the above 
#    copyright notice, this list of conditions and the following
#    disclaimer.
# 2. Redistributions in binary form must reproduce the above 
#    copyright notice, this list of conditions and the following 
#    disclaimer in the documentation and/or other materials 
#    provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

function insert_errcheck
{
	echo "if (( \$? != 0 )); then echo $xt_aid ERROR: the following command returned error code \$?: \"$1\";  exit 1; fi"
}

function make_range
{
	local i from=$1 to=$2
	for (( i=from; i<=to; i++)); do echo -n "$i "; done
}

# interpret command line.
# in 1 - line.
function cmdint
{
	local __c="$1" cnb
	if (( xt_interactive == 1 )); then eval "$__c"
	else 
		cnb="$(echo -e "${__c}" | tr -d '[[:blank:]]')"
		case $cnb in
			"#!/bin/bash")
				;;
			xt_for*)
				#echo "$__c"
				echo "while (( ++xt_iter_ind <= xt_iter_end )); do"
				echo "if [ \"\${xt_for_range[xt_iter_ind]}\" == \"0\" ]; then continue; fi"
				echo "xt_loop_iteration_init"
				;;
			xt_done)
				echo "done"
				echo "set_context null"
				;;
			*)	echo "$__c"
				;;
		esac
	fi
}

function init_slurm_job
{
	local job=$1 wt=$2 mem=$3 use_gpu=$4 cpus=$5
	echo "##############################SBATCH configuration####################################"
	echo "#SBATCH -J $1"
	echo "#SBATCH -o $1.o%j"
	echo "#SBATCH -e $1.e%j"
	echo "#SBATCH -c $cpus"
        echo "#SBATCH -N 1"
	if (( use_gpu==1 )); then
		echo "#SBATCH --gres gpu:1"
	fi
	if (( mem<=0 )); then mem=4000; fi
	echo "#SBATCH --mem ${mem}M"
	if (( wt <= 0 )); then wt=1; fi
	echo "#SBATCH -t ${wt}:00:00"
	echo "##############################end SBATCH configuration###############################"
}

function init_sge_job
{
	echo "#SGE configuration"
}

function help
{
		echo "Online commands: "
		echo "	load_scans <id1>[,...]	load scan(s) to DICOM by ID to the processing dir"
		echo "	load_type <type>	load scan(s) DICOM of a given type to the processing dir"
		echo "	load_dir <dir1>[,...]		load resource dir(s) to the processing dir"
		echo "	load_file <fil1> [fil2..]	load resource file(s) to the processing dir"
		echo "	load_workspace			load context variables from XNAT session"
		echo "	save_workspace			save context variables to XNAT session"
		echo "	save_dir <dir>			write resource dir to XNAT (overwrites existing)"
		echo "Offline commands: "	
		echo "	set_context <subject> <session>	[<context>]"
		echo "					set current subject and session, and context within session "
		echo "					each context corresponds to an isolated variable set."
		echo "	load_data <file>		load a .csv or .xlsx file into arrays"
		echo "	xt_for <subject_field> [<session_field> [[start]to[end]]]"
		echo "					iterate over all records."
		echo "	xt_done				end iteration over records."
		echo "	save_vars [var1] [,..]		save one or more variables to current context"
		echo "	load_vars [var1] [,..]		load one or more variables saved in current context"
		echo "	summary <label>	[column]	generate a comma-separated summary of existing contexts (match order in [column])"
		echo "	summary_mc <label>		summary when multiple session contexts were used"
		echo "	list_contexts			list of subcontexts within current context"
		echo "	del_context			delete a subcontext within current context"
		echo "	save_profile <label>		save current server credentials under the label."
		echo "	help				list console commands"
		echo "	quit				quit interactive console"
		echo "N.B. summary command destroys current context."
		echo "Built in variables: "
		echo "	xt_server xt_user xt_pass	XNAT server credentials"
		echo "	xt_project xt_subj xt_sess	XNAT project, subject and experiment labels"
		echo "	xt_jsession			current authenticated JSESSION"
		echo "	xt_aid				XTOLM analysis ID"
}
function quit
{
  xtes=1
}

#in 1 - profile label.
function load_profile
{
	local f=~/.xtolm/$1.profile
	source $f
}

#in 1 - profile label
function save_profile
{
#	set -x
	local f=~/.xtolm/$1.profile
	echo "xt_server=\"$xt_server\"" > $f
	echo "xt_user=\"$xt_user\"" >> $f
	echo "xt_project=\"$xt_project\"" >> $f
}

function save_defaults
{
	local f=~/.xtolm/xtolm.defaults
	local arg
	if [ ! -d "~/.xtolm" ]; then mkdir -p ~/.xtolm;	fi
	echo "" > $f
	for arg in $xt_args; do echo "${arg}=\"${!arg}\"" >> $f; done
}
function load_defaults
{
	local f=~/.xtolm/xtolm.defaults
	local arg
	if [ -f "$f" ]; then source $f; else return; fi
#	echo -n "#defaluts: "
#	for arg in $xt_args; do 
#		if [ -n "${!arg}" ]; then echo -n "[$arg]=${!arg} "; fi
#	done
#	echo ""
}

xt_args="xt_server xt_user xt_project" #xt_subj xt_sess"
if [ -z "$1" ]; then
	echo "xtolm: XNAT image analysis console interpreter"
	echo "Usage: xtolm [options] [<script file> [<script arguments>]]"
	echo "Options required for online storage:"
	echo "	-sr	<server>	XNAT server"
	echo "	-u	<user>		XNAT user"
	echo "	-pa	<password>	XNAT password"
	echo "	-pr	<XNAT project>	XNAT project"
	echo "OR,"
	echo "	-p	<profile_label>	Load previously saved server profile (a combination of options above)"
	echo "Options:"
	echo "	-subj	<subject ID>	XNAT subject"
	echo " 	-s 	<session>	XNAT session"	
	echo "	-i			interactive debug console"
	echo "	-id			analysis ID"
	echo "	-h 			print help on console commands"
	echo "	-t <int>		[1]. If >1, execute in separate tmux sessions on split range"
	echo "	-o			online mode"
	echo "	-d			debug mode"
	echo "	-gpu			[SLURM] run on GPU node [false]"
	echo "	-mem <MAX_MEM>		[SLURM] requested memory in MB [4000]"
	echo "	-wt <MAX_TIME>		[SLURM] requested job time limit (hours) [1]"
	echo "	-cpus <int>		[SLURM] CPU's per job [1]"
	echo "	-sge <from> <to> <pause>	submit jobs to SGE cluster for a range (pause in seconds)"
    echo "	-slrm <from> <to> <pause>	submit jobs to SLURM cluster for a range (pause in seconds)"
	echo "N.B.: if -o is not specified, online storage options are ignored."
	load_defaults
	exit -1
fi


xt_offline=1
xt_interactive=0
xt_debug=0
input_args="$*"
load_defaults

umask 0007
slabel=$1;
for arg in "$@"; do args[i]=$arg; ((i++)); done

narg=${#args[*]}
unset niarg xt_grid_from xt_grid_to 
xt_grid_mem=-1; xt_grid_gpu=-1; xt_grid_wt=-1; xt_grid_cpus=1; xt_threads=1;
sge_job=0; slrm_job=0
xt_grid_pause=0
pa=""


for((i=0; i<narg; i++)); do
	if [ "${args[i]}" == "-sge" ]; then ((i++)); sge_job=1; xt_grid_from="${args[i]}"; ((i++)); xt_grid_to="${args[i]}"
					((i++)); xt_grid_pause="${args[i]}"; continue; fi
	if [ "${args[i]}" == "-slrm" ]; then ((i++)); slrm_job=1; xt_grid_from="${args[i]}"; ((i++)); xt_grid_to="${args[i]}"
					((i++)); xt_grid_pause="${args[i]}"; continue; fi
	if [ "${args[i]}" == "-sr" ]; then (( i++ )); xt_server="${args[i]}"; pa="$pa -sr $xt_server"; continue; fi
	if [ "${args[i]}" == "-u" ]; then (( i++ )); xt_user="${args[i]}"; pa="$pa -u $xt_user"; continue; fi
	if [ "${args[i]}" == "-pa" ]; then (( i++ )); xt_pass="${args[i]}"; continue; fi
	if [ "${args[i]}" == "-pr" ]; then (( i++ )); xt_project="${args[i]}"; pa="$pa -pr $xt_project"; continue; fi
	if [ "${args[i]}" == "-p"  ]; then (( i++ )); xt_profile="${args[i]}"; pa="$pa -p $xt_profile"; continue; fi
	if [ "${args[i]}" == "-subj" ]; then (( i++ )); xt_subj="${args[i]}"; pa="$pa -subj $xt_subj"; continue; fi
#	if [ "${args[i]}" == "-r" ]; then (( i++ )); xt_script="${args[i]}"; continue; fi
	if [ "${args[i]}" == "-r" ]; then (( i++ )); continue; fi # this is passed when script is executed.
	if [ "${args[i]}" == "-s" ]; then (( i++ )); xt_sess="${args[i]}"; pa="$pa -s $xt_sess"; continue; fi
	if [ "${args[i]}" == "-id" ]; then (( i++ )); xt_aid="${args[i]}"; pa="$pa -id $xt_aid"; continue; fi
	if [ "${args[i]}" == "-h" ]; then help; exit 0; fi
	if [ "${args[i]}" == "-gpu" ]; then xt_grid_gpu=1; continue; fi
	if [ "${args[i]}" == "-mem" ]; then (( i++ )); xt_grid_mem="${args[i]}"; continue; fi
	if [ "${args[i]}" == "-wt" ]; then (( i++ )); xt_grid_wt="${args[i]}"; continue; fi
	if [ "${args[i]}" == "-cpus" ]; then (( i++ )); xt_grid_cpus="${args[i]}"; continue; fi
	if [ "${args[i]}" == "-i" ]; then xt_interactive=1; continue; fi
	if [ "${args[i]}" == "-o" ]; then xt_offline=0; pa="$pa -o"; continue; fi
	if [ "${args[i]}" == "-d" ]; then xt_debug=1; continue; fi
	if [ "${args[i]}" == "-t" ]; then ((i++)); xt_threads="${args[i]}"; continue; fi	
	niarg="$niarg ${args[i]}" #this is reached when script name is supplied
done

if (( sge_job || slrm_job )); then xt_threads=1; fi

if [ -n "$xt_profile" ]; then
	load_profile $xt_profile
fi
xt_jsession=""
if (( xt_offline == 0 )); then
	if [ -z "$xt_pass" ]; then read -s -p "XNAT password for $xt_user: " xt_pass; echo ""; fi
	echo "#verifying login..."
	JSESSION=`curl -s -k -u $xt_user:$xt_pass "${xt_server}/REST/JSESSION"`
	JSERROR=`echo $JSESSION | grep Error`
	
	while [ -n "$JSERROR" ]; do
		read -s -p "#Password for $xt_user incorrect, retry: " xt_pass
		echo "#verifying login credentials..."
		JSESSION=`curl -s -k -u $xt_user:$xt_pass "${xt_server}/REST/JSESSION"`
		JSERROR=`echo $JSESSION | grep Error`	
	done
	echo "#login verified"
	pa="$pa -pa $xt_pass"
	xt_jsession=$JSESSION
fi

if (( "$xt_offline" == 0 )); then
	if [ -z "$xt_server" -o -z "$xt_project" -o -z "$xt_user" -o -z "$xt_pass" ]; then
		echo "#Xtolm ERROR: one of parameters was not set, exiting."
		echo "#server=$xt_server, user=$xt_user, pass=****, project=$xt_project, subject=$xt_subj, session=$xt_sess"
		exit -1
	else
		echo -n "#"
		for arg in $xt_args; do 
			if [ -n "${!arg}" ]; then echo -n "[$arg]=${!arg} "; fi
		done
		echo ""
	fi
fi

if [ -n "$niarg" ]; then

	tmp=( $niarg )
	xt_script=${tmp[0]}	
	tmp[0]=""
	if [ ! -f "$xt_script" ]; then
		echo "#File $xt_script not found, exiting"
		exit -1
	fi
	xt_scriptname="`basename $xt_script`"
	unset fils
	for (( i=0; i<xt_threads; i++ )); do
		threadno=$(( i+1 ))
		fil=`pwd`/`mktemp ${xt_scriptname}XXX.sh`
		#echo \#$sargs		
        #echo "creating $fil"
		echo "#!/bin/bash" > $fil
		echo "#Created by Xtolm: XNAT image analysis console interpreter on `date +\"%Y/%m/%d %H:%M\"`" >> $fil
		echo "xt_threads=$xt_threads" >> $fil
		echo "xt_threadno=$threadno" >> $fil
		fils[i]="$fil"
	done

	echo "xt_grid_gpu: $xt_grid_gpu"

	if (( slrm_job==1 )); then
		init_slurm_job $xt_script $xt_grid_wt $xt_grid_mem $xt_grid_gpu $xt_grid_cpus  >> $fil
	elif (( sge_job==1 )); then
		init_sge_job $xt_script >> $fil
	fi

	for (( i=0; i<xt_threads; i++ )); do
		fil=${fils[i]}
        #echo "cat $xt_script | xtolm $pa -r $xt_script >> $fil"
		cat $xt_script | xtolm $pa -r $xt_script >> $fil
		chmod +x $fil
        #echo $fil
		#if (( xt_debug == 0 )); then
		#	trap "rm -rf $fil" EXIT
		#fi
	done

	ret_code=0

	if (( sge_job==1 )); then
		echo "sge job"
		_linux_user=`whoami`
		#submit all jobs
		mkdir -p logs
		unset module
		#set -x
		for l in `make_range $xt_grid_from $xt_grid_to`; do
			echo qsub $fil $l ${tmp[*]}
			qsub $fil $l ${tmp[*]}				
			sleep $xt_grid_pause
		done
		#check queued/running jobs.
		res=`qstat -u $_linux_user`
		#wait until all jobs are finished, then move logs and exit
		while [ -n "$res" ]; do
			res=`qstat -u $_linux_user`
			sleep $xt_grid_pause
		done
		echo `basename $fil`*
		mv `basename $fil`*.o* logs/
		exit 0
	elif (( slrm_job==1 )); then
		for l in `make_range $xt_grid_from $xt_grid_to`; do
			echo sbatch $fil $l ${tmp[*]}
			sbatch $fil $l ${tmp[*]}
			sleep $xt_grid_pause
		done
		usr=`whoami`
		#check queued/running jobs.
		squeue -u $usr
		njobs=`squeue -u $usr | wc -l`
		echo "submitted $(( njobs -1 )) jobs"
		while (( njobs>1 )); do
		    squeue -u $usr
		    njobs=`squeue -u $usr | wc -l`
		    sleep 10		    
		done
	else
		unset sessions
		if (( xt_threads==1 )); then 
			$fil ${tmp[*]}
			ret_code="$?"
		else
			#launch sessions
			for (( i=0; i<xt_threads; i++ )); do
				fil=${fils[i]}
				echo tmux new -d "$fil ${tmp[*]}"
				tmux new -d "$fil ${tmp[*]}"
				sessions[i]=`tmux display-message -p '#S'`
			done
			#track running tmux sessions
			while : ; do
				echo "tmux sessions still running:"
				nrun=0
				for (( i=0; i<xt_threads; i++ )); do
					sess=${sessions[i]}
					tmux has-session -t $sess 2>/dev/null
					if (( $? == 0 )); then 
						((nrun++))
						echo $sess
					fi
				done
				if (( nrun<1 )); then 
					echo "all sessions finished, exiting"
					break
				fi
				read -t 10 -p "enter <number> to attach, x to exit, <enter> or wait for 10s to refresh:" status
				if [ "$status" == "r" ]; then 
					continue
				elif [ "$status" == "x" ]; then 
					break
				else 
					tmux has-session -t $status 2>/dev/null
					if (( $?==0 )); then tmux attach -t $status; fi
				fi
			done
			ret_code=0
		fi
	fi

	for (( i=0; i<xt_threads; i++ )); do
		if (( xt_debug == 0 )); then
			rm -rf ${fils[i]}
		fi
	done
    
	exit $ret_code
fi

#if [ -z "$xt_aid" ]; then 
#	echo "#Xtolm WARNING: analysis ID is not provided"
#fi
#set -x
#declare source functions and global variables
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if (( xt_interactive==0 )); then
	cat $DIR/xtolm.src
	echo "declare -A xt_vars"
	echo "declare -A xt_scans"
else
	declare -A xt_vars
	declare -A xt_scans
	source $DIR/xtolm.src
fi

#workspace variable definitions
cmdint "xt_first_context=1"
cmdint "xt_workdir=`pwd`"
cmdint "xt_server=$xt_server"
if (( xt_offline == 0 )); then	cmdint "xt_jsession=$xt_jsession"; fi
cmdint "xt_server=`echo $xt_server | sed 's/\/$//'`"
cmdint "xt_user=$xt_user"; cmdint "xt_pass=$xt_pass"; cmdint "xt_project=$xt_project"; cmdint "xt_subj=$xt_subj"; cmdint "xt_script=$xt_script"
cmdint "xt_sess=$xt_sess"; cmdint "xt_aid=$xt_aid"; cmdint "xt_interactive=$xt_interactive"; cmdint "xt_offline=$xt_offline"
cmdint "xt_iter_ind=0"; cmdint "xt_iter_end=0"
#1. set initial context.
if [ -n "$xt_subj" -a -n "$xt_sess" ]; then
	cmdint "set_context $xt_subj $xt_sess"
else 
	cmdint "set_context null"
fi

HISTFILE=~/.xtolm/.history
if [ -z "$xt_script" ]; then
	if ((xt_interactive==1));then
		history -r
		while read -ep "xtolm>" line; do
			if [ "${line:0:4}" == "exit" ]; then history -w; fi
			cmdint "$line"
			history -s "$line"
			if (( xtes==1 )); then echo ""; break; fi
		done
		history -w
	else
		while read line; do
			cmdint "$line"
		done
	fi
fi

save_defaults
cmdint "echo \"#end reached\""
