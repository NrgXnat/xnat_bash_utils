#!/bin/bash

# Author: Mikhail Milchenko, mmilchenko@wustl.edu
# Copyright (c) 2010-2021, Computational Imaging Lab, School of Medicine, 
# Washington University in Saint Louis

# Redistribution and use in source and binary forms,
# with or without modification, are permitted provided 
# that the following conditions are met:

# 1. Redistributions of source code must retain the above 
#    copyright notice, this list of conditions and the following
#    disclaimer.
# 2. Redistributions in binary form must reproduce the above 
#    copyright notice, this list of conditions and the following 
#    disclaimer in the documentation and/or other materials 
#    provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

function check_varname
{
    local s="$1" i
    if [[ "$s" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then echo $s; return; fi
    #1. replace all invalid characters with '_'
    out=""
    for (( i=0; i<${#s}; i++ )); do
        ch="${s:$i:1}"
        if [[ "$ch" =~ ^[a-zA-Z0-9_]*$ ]]; then 
            out=$out$ch
        else
            out=${out}_
        fi
    done
    if [[ ! "${out:0:1}" =~ ^[a-zA-Z_]$ ]]; then out="_$out"; fi
    echo "$out"    
}

#convert array to string
# in 1 -array name.
function arr2line
{
	local arr=$1
	local fil=$2
	local i
	local l=""
	local t
	local sz
	eval "sz=\${#$arr[*]}"
	for ((i=0; i<sz; i++));do
		eval "t=\"\${$arr[i]}\""
		echo -n \"$t\"" " >> $fil
	done
}

#correct string from excel.
#1 string to correct
function corrstr
{
	local str=$1
	OLDIFS=$IFS
	IFS=' '
	local cstr="`echo ${str[*]} | tr -d '\r'`"
	echo $cstr
	IFS=$OLDIFS
}

###############################################
#
# Read csv variables into bash array.
# First row in csv file must contain var names.
#
# Data omissions are not permitted.
#

if [ -z "$2" ]; then 
	echo "Convet csv to bash source file"
	echo "Usage: rcsv <.csv file> <outfile> [-n]"
	echo "options:"
	echo "	-n	do not output column names array (useful within xt_for cycles)"
	exit -1;
fi


infile=$1
outfile=$2
nonames=""

if [ "$3" == "-n" ]; then 
	nonames=1
	echo "names array will not be saved."
fi


hd="`head -1 "$infile"`"
IFS="," read -a names <<< $hd

for ((i=0;i<${#names[*]};i++)); do names[i]=`check_varname "${names[i]}"`; done
echo ${names[*]}
n=0;row=0

while IFS=$',' read -r -a vals; do
    if ((n==0)); then ((n++)); continue; fi
    for ((i=0; i<${#names[*]}; i++)); do
        col=${names[i]}
        val="${vals[i]}"
        eval "${col}[$row]='$val'"
    done
    ((row++))
done < $infile

echo -n "" > $outfile
if [ -z "$nonames" ]; then
	echo -n "rcsv_col_names=(" >> $outfile
    arr2line names $outfile
    echo ")" >> $outfile
fi

arr2line "rcsv_col_names"
for ((i=0; i<=${#names[*]}; i++)); do
	col=${names[i]}
	if [ -z "$col" ]; then continue; fi
    sout=""
    for ((j=0; j<row; j++)); do
        eval "val=\'\${$col[j]}\'"
        sout+="$val "
    done
    echo -n "$col=(" >> $outfile
    echo -n "$sout" >> $outfile
    echo ")" >> $outfile
done
