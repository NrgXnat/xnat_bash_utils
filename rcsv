#!/bin/bash

#convert array to string
# in 1 -array name.
function arr2line
{
	local arr=$1
	local fil=$2
	local i
	local l=""
	local t
	local sz
	eval "sz=\${#$arr[*]}"
	for ((i=0; i<sz; i++));do
		eval "t=\"\${$arr[i]}\""
		echo -n \"$t\"" " >> $fil
	done
}

function string_rep
{
	local str=( $1 )
	local out
	for ((i=0; i<${#str[*]}; i++)); do
		out[i]=\"${str[i]}\"
	done
	echo ${out[*]}
}


#correct string from excel.
#1 string to correct
function corrstr
{
	local str=$1
	OLDIFS=$IFS
	IFS=' '
	local cstr="`echo ${str[*]} | tr -d '\r'`"
	echo $cstr
	IFS=$OLDIFS
}

###############################################
#
# Read csv variables into bash array.
# First row in csv file must contain var names.
#
# Data omissions are not permitted.
#

if [ -z "$2" ]; then 
	echo "Convet csv to bash source file"
	echo "Usage: rcsv <.csv file> <outfile> [-n]"
# [-a <append_to_column_name>]
	echo "options:"
	echo "	-n	do not output column names array (useful within xt_for cycles)"
	exit -1;
fi


infile=$1
outfile=$2
nonames=""
append=""

if [ "$3"=="-a" ]; then
	if [ -n "$4" ]; then append=$4; fi
fi
if [ "$3" == "-n" ]; then 
	nonames=1
	echo "names array will not be saved."
fi

n=0
row=0

names="`head -1 "$infile"`"
names=`corrstr "$names"`
OLDIFS="$IFS"
IFS=","
names=(${names[*]})
IFS=$OLDIFS
names0=(`echo ${names[*]}`)
names=(`echo ${names[*]}`)
for ((i=0;i<${#names[*]};i++)); do names[i]=${names[i]}$append; done
echo ${names0[*]}
#IFS=","
#set -x
while IFS=$',' read -r -a vals; do
	if ((n==0)); then ((n++)); continue; fi
	for ((i=0; i<${#names[*]}; i++)); do
		col=${names[i]}
		val="`corrstr \"${vals[i]}\"`"
		eval "${col}[$row]=\"$val\""
	done
	(( row++ ))
done < $infile
echo -n "" > $outfile
if [ -z "$nonames" ]; then
	echo -n "rcsv_col_names=(" >> $outfile; arr2line names0 $outfile; echo ")" >> $outfile
fi

arr2line "rcsv_col_names" 
for ((i=0; i<=${#names[*]}; i++)); do
	col=${names[i]}
	if [ -z "$col" ]; then continue; fi
	echo -n "$col=""(" >> $outfile
	arr2line $col $outfile
	echo ")" >> $outfile
done
